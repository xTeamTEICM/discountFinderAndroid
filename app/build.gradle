apply plugin: 'com.android.application'
apply plugin: 'jacoco-android'

task jacocoCustomTestReport(type: JacocoReport, dependsOn: "testDebugUnitTest") {
    println ":${project.name}:Generating Jacoco reports"
	group = "Reporting"
    description = "Generate Jacoco coverage reports"

    reports {
        xml.enabled = true
		csv.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class',
                      '**/R$*.class',
                      '**/BuildConfig.*',
                      '**/Manifest*.*',
                      'android/**/*.*',
                      '**/Lambda$*.class', //Retrolambda
                      '**/Lambda.class',
                      '**/*Lambda.class',
                      '**/*Lambda*.class',
                      '**/*Lambda*.*',
                      '**/*Builder.*',
                      '**/*_MembersInjector.class',  //Dagger2 generated code
                      '**/*_MembersInjector*.*',  //Dagger2 generated code
                      '**/*_*Factory*.*', //Dagger2 generated code
                      '**/*Component*.*', //Dagger2 generated code
                      '**/*Module*.*' //Dagger2 generated code
    ]
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: project.projectDir, includes:
            ['**/*.exec' , '**/*.ec'])
}

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.2"
    defaultConfig {
        applicationId "eu.jnksoftware.discountfinderandroid"
        minSdkVersion 19
        targetSdkVersion 26
        multiDexEnabled true

        def buildNumber = System.getenv("BUILD_NUMBER") ?: 0
        if (buildNumber != 0) {
            versionCode = buildNumber.toInteger()
            versionName = "${buildNumber}-" + getDate()
        } else {
            versionCode = 0
            versionName = "local-" + getDate()
        }

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    signingConfigs {
        release {
            if (project.hasProperty('RELEASE_STORE_FILE')) {
                storeFile file(RELEASE_STORE_FILE)
                storePassword RELEASE_STORE_PASSWORD
                keyAlias RELEASE_KEY_ALIAS
                keyPassword RELEASE_KEY_PASSWORD
            }
        }
    }

    buildTypes {
        release {
            if (project.hasProperty('RELEASE_STORE_FILE')) {
                signingConfig signingConfigs.release
            }
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testCoverageEnabled true
	    debuggable false
        }
        debug {
            testCoverageEnabled true
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    // Android runner and rules support
    androidTestCompile 'com.android.support.test:runner:1.0.1'
    androidTestCompile 'com.android.support.test:rules:1.0.1'

    compile 'com.android.support:appcompat-v7:26.1.0'
    compile 'com.android.support:recyclerview-v7:26.1.0'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    compile 'com.github.medyo:android-about-page:1.1.1'
    compile 'com.android.support:design:26.1.0'
    compile 'com.android.support:support-v4:26.1.0'
    compile 'com.github.bumptech.glide:glide:3.7.0'

    compile 'com.squareup.picasso:picasso:2.5.2'
    compile 'com.squareup.retrofit2:retrofit:2.3.0'
    compile 'com.squareup.retrofit2:converter-gson:2.3.0'
    compile 'com.squareup.retrofit2:converter-scalars:2.3.0'

    compile 'com.squareup.okhttp3:logging-interceptor:3.5.0'
    compile 'com.squareup.retrofit2:converter-jackson:2.3.0'

    testCompile 'junit:junit:4.12'
    testCompile 'org.json:json:20160810'
    compile 'com.google.code.gson:gson:2.8.2'
    compile 'com.google.firebase:firebase-messaging:11.8.0'

    //Mockito (testing)
    testCompile 'org.mockito:mockito-core:2.7.22'
    androidTestCompile 'org.mockito:mockito-android:2.7.22'
    compile 'com.squareup.retrofit2:retrofit-mock:2.3.0'

    // Espresso support
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    //for mocking support
    androidTestCompile 'com.android.support.test.espresso:espresso-intents:3.0.1'

    //RecyclerView
    compile 'com.android.support:recyclerview-v7:26.1.0'
    //CardView
    compile 'com.android.support:cardview-v7:26.1.0'

    compile 'com.google.firebase:firebase-ads:11.8.0'
    compile 'com.google.android.gms:play-services:11.8.0'
    compile 'com.squareup.okhttp3:mockwebserver:3.9.1'
    androidTestCompile 'com.21buttons:fragment-test-rule:1.0.0'

    //mock server
    androidTestCompile 'com.squareup.retrofit2:retrofit-mock:2.3.0'
    testImplementation 'com.squareup.okhttp3:mockwebserver:3.7.0'



}

static def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMddHHmmss')
    return formattedDate
}


apply plugin: 'com.google.gms.google-services'
